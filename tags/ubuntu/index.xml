<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ubuntu on tac lifelog</title><link>https://tro3373.github.io/tags/ubuntu/</link><description>Recent content in ubuntu on tac lifelog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>All rights reserved - 2016</copyright><lastBuildDate>Sat, 10 Oct 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://tro3373.github.io/tags/ubuntu/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Machine(Boot2Docker(Tiny Linux)) 上で docker/gitlab を動かしてみる</title><link>https://tro3373.github.io/post/docker/docker-machine-docker-gitlab/</link><pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/docker/docker-machine-docker-gitlab/</guid><description>sameersbn/gitlab:8.0.4 オンプレミスな GitHub Clone GitLab
かなり気持ち悪いロゴ&amp;hellip;(なぜこうなった) バージョンUPでこうなったらしい&amp;hellip; それはいいとして、 Docker image を利用して、公式に公開されている、docker/gitlab
を docker-machine で作成した docker-host（virtual-box） 上で 動かしてみた。
インストール ssh で docker-machine ホストOSへ接続した状態でおこなう
docker-machine ssh dev docker pull sameersbn/gitlab:8.0.4 cd ~/works/ git clone https://github.com/sameersbn/docker-gitlab.git cd docker-gitlab # Dockerfile からビルドする場合 # docker build --tag=$USER/gitlab . docker-compose インストール docker コンテナを複数使用するアプリケーションの構成（起動順序や必要リソースなど）をまとめて管理できるのが、 docker-compose
clone されたディレクトリに、 docker-compose.yml が存在するので、 docker-compose で起動できる。
# docker-compose ダウンロード cd ~/Downloads wget https://github.com/docker/compose/releases/download/1.4.2/docker-compose-Linux-x86_64 sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose sudo chmod 755 /usr/local/bin/docker-compose # version 確認 docker-compose --version # 以下が表示される # docker-compose version: 1.</description></item><item><title>Ubuntu 14.04 上に Docker Machine を インストールする</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-shang-ni-docker-machine-wo-insutorusuru/</link><pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-shang-ni-docker-machine-wo-insutorusuru/</guid><description>Docker Machine を試す！
docker-machine docker-machine は Docker ホストを管理するツールで、ホストとなる Docker コンテナ起動サーバが、VM や AWS、 Digital Ocean などの ホストへ接続し実行する事で、あたかも local で docker コンテナが動いているかのように振る舞うツール。
Docker コンテナ管理ツールとしても仕様できるみたい。
docker インストール まずは、 dokcer のインストール
# Docker install wget -qO- https://get.docker.com/ | sh # version を確認しておく。 docker --version # 以下が表示される # Docker version 1.8.2, build 0a8c2e3 # ユーザーを docker グループに追加 sudo usermod -aG docker $USER docker-machine インストール 続いて、 docker-machine をインストールする。
cd ~/Download wget https://github.com/docker/machine/releases/download/v0.4.1/docker-machine_linux-amd64 sudo mkdir -p /opt/bin sudo mv docker-machine_linux-amd64 /opt/bin/docker-machine sudo chmod +x /opt/bin/docker-machine # docker-machine version 確認 # /opt/bin にパスが通っている事！ docker-machine -v # 以下のようにバージョンが表示される # docker-machine version 0.</description></item><item><title>Ubuntu 14.04 wireshark 設定</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-wireshark-she-ding/</link><pubDate>Sat, 12 Sep 2015 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-wireshark-she-ding/</guid><description>Ubuntu 14.04 で wireshark を導入すると、root 権限で起動するなりしないと、 通常はパケットキャプチャできない設定になっている。 ので、任意の一般ユーザをキャプチャできるよう、設定する。
# wireshark インストール sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get install wireshark ## TODO 以下、、必要？？？ # wireshark グループ作成 sudo groupadd wireshark # wireshark グループ に自分を追加 sudo usermod -a -G wireshark [user_name] sudo chgrp wireshark /usr/bin/dumpcap sudo chmod 750 /usr/bin/dumpcap # dumpcapに対して以下のケーバビリティを許可 sudo setcap cap_net_raw,cap_net_admin=eip /usr/bin/dumpcap sudo getcap /usr/bin/dumpcap それでもダメな場合は、、、 export LIBOVERLAY_SCROLLBAR=0 wireshark</description></item><item><title>Ubuntu14.04 bashrc にCentOs6.5 Solarizedカラースキームを設定</title><link>https://tro3373.github.io/post/ubuntu/ubuntu14-04-bashrc-nicentos6-5-solarizedkarasukimuwoshe-ding/</link><pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu14-04-bashrc-nicentos6-5-solarizedkarasukimuwoshe-ding/</guid><description>参考 CentOS環境にSolarizedカラースキームを適用する を参考に
設定 以下を .bashrc へ追記
$ vim ~/.bashrc LS_COLORS='no=00;38;5;244:rs=0:di=00;38;5;33:ln=00;38;5;37:mh=00:pi=48;5;230;38;5;136;01:so=48;5;230;38;5;136;01:do=48;5;230;38;5;136;01:bd=48;5;230;38;5;244;01:cd=48;5;230;38;5;244;01:or=48;5;235;38;5;160:su=48;5;160;38;5;230:sg=48;5;136;38;5;230:ca=30;41:tw=48;5;64;38;5;230:ow=48;5;235;38;5;33:st=48;5;33;38;5;230:ex=00;38;5;64:*.tar=00;38;5;61:*.tgz=00;38;5;61:*.arj=00;38;5;61:*.taz=00;38;5;61:*.lzh=00;38;5;61:*.lzma=00;38;5;61:*.tlz=00;38;5;61:*.txz=00;38;5;61:*.zip=00;38;5;61:*.z=00;38;5;61:*.Z=00;38;5;61:*.dz=00;38;5;61:*.gz=00;38;5;61:*.lz=00;38;5;61:*.xz=00;38;5;61:*.bz2=00;38;5;61:*.bz=00;38;5;61:*.tbz=00;38;5;61:*.tbz2=00;38;5;61:*.tz=00;38;5;61:*.deb=00;38;5;61:*.rpm=00;38;5;61:*.jar=00;38;5;61:*.rar=00;38;5;61:*.ace=00;38;5;61:*.zoo=00;38;5;61:*.cpio=00;38;5;61:*.7z=00;38;5;61:*.rz=00;38;5;61:*.apk=00;38;5;61:*.gem=00;38;5;61:*.jpg=00;38;5;136:*.JPG=00;38;5;136:*.jpeg=00;38;5;136:*.gif=00;38;5;136:*.bmp=00;38;5;136:*.pbm=00;38;5;136:*.pgm=00;38;5;136:*.ppm=00;38;5;136:*.tga=00;38;5;136:*.xbm=00;38;5;136:*.xpm=00;38;5;136:*.tif=00;38;5;136:*.tiff=00;38;5;136:*.png=00;38;5;136:*.svg=00;38;5;136:*.svgz=00;38;5;136:*.mng=00;38;5;136:*.pcx=00;38;5;136:*.dl=00;38;5;136:*.xcf=00;38;5;136:*.xwd=00;38;5;136:*.yuv=00;38;5;136:*.cgm=00;38;5;136:*.emf=00;38;5;136:*.eps=00;38;5;136:*.CR2=00;38;5;136:*.ico=00;38;5;136:*.tex=00;38;5;245:*.rdf=00;38;5;245:*.owl=00;38;5;245:*.n3=00;38;5;245:*.ttl=00;38;5;245:*.nt=00;38;5;245:*.torrent=00;38;5;245:*.xml=00;38;5;245:*Makefile=00;38;5;245:*Rakefile=00;38;5;245:*build.xml=00;38;5;245:*rc=00;38;5;245:*1=00;38;5;245:*.nfo=00;38;5;245:*README=00;38;5;245:*README.txt=00;38;5;245:*readme.txt=00;38;5;245:*.md=00;38;5;245:*README.markdown=00;38;5;245:*.ini=00;38;5;245:*.yml=00;38;5;245:*.cfg=00;38;5;245:*.conf=00;38;5;245:*.c=00;38;5;245:*.cpp=00;38;5;245:*.cc=00;38;5;245:*.log=00;38;5;240:*.bak=00;38;5;240:*.aux=00;38;5;240:*.lof=00;38;5;240:*.lol=00;38;5;240:*.lot=00;38;5;240:*.out=00;38;5;240:*.toc=00;38;5;240:*.bbl=00;38;5;240:*.blg=00;38;5;240:*~=00;38;5;240:*#=00;38;5;240:*.part=00;38;5;240:*.incomplete=00;38;5;240:*.swp=00;38;5;240:*.tmp=00;38;5;240:*.temp=00;38;5;240:*.o=00;38;5;240:*.pyc=00;38;5;240:*.class=00;38;5;240:*.cache=00;38;5;240:*.aac=00;38;5;166:*.au=00;38;5;166:*.flac=00;38;5;166:*.mid=00;38;5;166:*.midi=00;38;5;166:*.mka=00;38;5;166:*.mp3=00;38;5;166:*.mpc=00;38;5;166:*.ogg=00;38;5;166:*.ra=00;38;5;166:*.wav=00;38;5;166:*.m4a=00;38;5;166:*.axa=00;38;5;166:*.oga=00;38;5;166:*.spx=00;38;5;166:*.xspf=00;38;5;166:*.mov=00;38;5;166:*.mpg=00;38;5;166:*.mpeg=00;38;5;166:*.m2v=00;38;5;166:*.mkv=00;38;5;166:*.ogm=00;38;5;166:*.mp4=00;38;5;166:*.m4v=00;38;5;166:*.mp4v=00;38;5;166:*.vob=00;38;5;166:*.qt=00;38;5;166:*.nuv=00;38;5;166:*.wmv=00;38;5;166:*.asf=00;38;5;166:*.rm=00;38;5;166:*.rmvb=00;38;5;166:*.flc=00;38;5;166:*.avi=00;38;5;166:*.fli=00;38;5;166:*.flv=00;38;5;166:*.gl=00;38;5;166:*.m2ts=00;38;5;166:*.divx=00;38;5;166:*.webm=00;38;5;166:*.axv=00;38;5;166:*.anx=00;38;5;166:*.ogv=00;38;5;166:*.ogx=00;38;5;166:' export LS_COLORS</description></item><item><title>Ubuntu 14.04 terminalからログオフする</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-terminalkararoguohusuru/</link><pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-terminalkararoguohusuru/</guid><description>Ubuntu 14.04 terminalからログオフする
DISPLAY=:0 gnome-session-quit --logout --no-prompt</description></item><item><title>Ubuntu 14.04 で、ruby on rails passenger をインストールして apache 連携する</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-de-ruby-on-rails-passenger-woinsutorusite-apache-lian-xi-suru/</link><pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-de-ruby-on-rails-passenger-woinsutorusite-apache-lian-xi-suru/</guid><description>passenger インストール cd ~/ rbenv exec gem install passenger rbenv rehash passenger-install-apache2-module実行 rbenv exec passenger-install-apache2-module passenger-install-apache2-module 詳細
This installer will guide you through the entire installation process. It shouldn't take more than 3 minutes in total. Here's what you can expect from the installation process: 1. The Apache 2 module will be installed for you. 2. You'll learn how to configure Apache. 3. You'll learn how to deploy a Ruby on Rails application.</description></item><item><title>Ubuntu14.04 visudo エディタをvimに設定する</title><link>https://tro3373.github.io/post/ubuntu/ubuntu14-04-visudo-edeitawovimnishe-ding-suru/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu14-04-visudo-edeitawovimnishe-ding-suru/</guid><description>Ubuntu14.04 visudo エディタをvimに設定する 以下コマンドでエディタを変更しておく
sudo update-alternatives --config editor</description></item><item><title>Ubuntu 14.04 postgresql install</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-postgresql-install/</link><pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-postgresql-install/</guid><description>postgresql install sudo apt-get install postgresql sudo apt-get install libpq-dev postgresql settings sudo su postgres -c psql postgres=# CREATE ROLE [user] SUPERUSER LOGIN; postgres=# \password [user] [userpassword] [userpassword] check or list database, tables, indexes, and so on. postgres=# create database [user]; postgres=# select * from pg_user; /* ユーザ一覧 */ postgres=# \d /* 表、インデックスの一覧 */ postgres=# \dt /* 表の一覧 */ postgres=# \d [表名] /* 表の項目一覧 */ postgres=# \l /* データベース一覧、文字コード表示 */ postgres=# \q /* 終了 */ psql -l # データベース 一覧 psql [データベース名] # psql へ切り替え</description></item><item><title>Ubuntu 14.04 remote desktop with xrdp</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-remote-desktop-with-xrdp/</link><pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-remote-desktop-with-xrdp/</guid><description>install xrdp server sudo apt-get install xrdp sudo apt-get install xlde echo lxsession -s LXDE -e LXDE &amp;gt; ~/.xsession sudo service xrdp restart</description></item><item><title>Ubuntu14.04 ruby 用 vim 設定</title><link>https://tro3373.github.io/post/ubuntu/ubuntu14-04-ruby-yong-vim-she-ding/</link><pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu14-04-ruby-yong-vim-she-ding/</guid><description>ruby 開発環境 vim install sudo apt-get install vim vim-gtk vim-gui-common install vim-nox vim --version |grep ruby +diff +menu -ruby +writebackup sudo apt-get install vim-nox vim --version |grep ruby +diff +menu +ruby +writebackup settings mkdir -p ~/.vim/bundle cd ~/.vim/bundle/ git clone http://github.com/Shougo/neobundle.vim vim ~/.vimrc
set number set nocompatible filetype plugin indent off if has('vim_starting') set runtimepath+=~/.vim/bundle/neobundle.vim call neobundle#rc(expand('~/.vim/bundle')) endif &amp;quot; 以下は必要に応じて追加 &amp;quot; NeoBundle 'Shougo/unite.vim' &amp;quot; NeoBundle 'Shougo/neosnippet.vim' NeoBundle 'git://github.</description></item><item><title>wripeでバックアップしたtxtファイルの中身からファイル名を変更する</title><link>https://tro3373.github.io/post/wripedebatukuatupusitatxthuairunozhong-shen-karahuairuming-wobian-geng-suru/</link><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/wripedebatukuatupusitatxthuairunozhong-shen-karahuairuming-wobian-geng-suru/</guid><description>bash script でwripeバックアップファイルの変換処理を書いた
主な内容 bash script Ubuntu 14.04で確認 UTF8,LF変換にnkf のインストールが必要 ファイル変換内容 １行目（wripeタイトル）から、ファイル名決定 ファイル名に使用できる文字列変換 wripeタイトルに日付が入っていた場合の処理をある程度考慮 １行目は削除 UTF8,LF変換 tag 空白４文字変換 起動引数 第一引数：バックアップファイルの保存先 疲れた&amp;hellip;.
#!/bin/bash DIR_IN=$1 OUT_NAME=out DIR_OUT=$DIR_IN/$OUT_NAME which nkf 1&amp;gt;/dev/null 2&amp;gt;/dev/null RC=$? if [ $RC -ne 0 ]; then echo &amp;quot;nkf not installed!&amp;quot; return fi if [ &amp;quot;&amp;quot; == &amp;quot;$1&amp;quot; ]; then echo &amp;quot;arg1(input directory) is blank!&amp;quot; return fi if [ -d $DIR_IN ]; then # specified directory is exist.</description></item><item><title>Ubuntu 14.04 Change LF UTF-8 Under Specified Directory</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-change-lf-utf-8-under-specified-directory/</link><pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-change-lf-utf-8-under-specified-directory/</guid><description>Install nkf sudo aptitude install nkf usege nkf -wLu --overwrite *.txt # -w: change to UTF8 # -Lu: change to LF # --overwrite: overwrite file! Exclude .git or and so on files, and specified some extension. find . \( -name &amp;quot;i18n&amp;quot; -o -name &amp;quot;.git&amp;quot; -o -name &amp;quot;jquery*.js&amp;quot; -o -name &amp;quot;jquery*.css&amp;quot; \) -prune -o -type f \( -name &amp;quot;*.txt&amp;quot; -o -name &amp;quot;*.js&amp;quot; -o -name &amp;quot;*.css&amp;quot; -o -name &amp;quot;*.html&amp;quot; -o -name &amp;quot;*.</description></item><item><title>Ubuntu 14.04 grive install</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-grive-install/</link><pubDate>Sat, 11 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-grive-install/</guid><description>install sudo add-apt-repository ppa:nilarimogard/webupd8 sudo apt-get update sudo aptitude install grive mkdir -p ~/grive cd ~/grive grive -a grive -a コマンドでURL表示 アクセスし、承認するとキーが表示される terminalへ貼り付け！ 同期開始！ file sync cd ~/grive grive</description></item><item><title>Ubuntu 14.04 Theme をnumixへ変更</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-theme-wonumixhebian-geng/</link><pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-theme-wonumixhebian-geng/</guid><description>install sudo apt-add-repository ppa:numix/ppa sudo aptitude update sudo aptitude install numix-gtk-theme #sudo aptitude install numix-icon-theme-utouch sudo aptitude install numix-icon-theme sudo aptitude install numix-wallpaper-saucy # ↓この丸いアイコンがすごくよい。 sudo aptitude install numix-icon-theme-circle theme setting setting from tweak-tool</description></item><item><title>Debian wheezy に Ubuntu 14.04 クライアントからSSH接続する</title><link>https://tro3373.github.io/post/kurobox-linkstation/debian-wheezy-ni-ubuntu-14-04-kuraiantokarasshjie-sok-suru/</link><pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/kurobox-linkstation/debian-wheezy-ni-ubuntu-14-04-kuraiantokarasshjie-sok-suru/</guid><description>[Client] Key generate create pub, private key at ~/.ssh cd ~/.ssh ssh-keygen -t rsa # created under files id_rsa id_rsa.pub upload public key to server. scp id_rsa.pub [server ip address]:~/ [Client] .ssh/config vim ~/.ssh/config
Host [server name] HostName [server name or ipaddress] Port 22 User [login user name] IdentityFile ~/.ssh/id_rsa [server] regist pub key login the server. cd ~ cat rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys [server] sshd settings sudo vim /etc/ssh/sshd_config check the settings</description></item><item><title>Ubuntu 14.04 libwebsockets クライアントを試す</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-libwebsockets-kuraiantowoshi-su/</link><pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-libwebsockets-kuraiantowoshi-su/</guid><description>libwebsockets build sudo aptitude install cmake cd ~/works git clone git://git.libwebsockets.org/libwebsockets cd libwebsockets/ mkdir build cd build cmake .. make -j8 # sudo make install サンプルとして作成したサーバに libwebsocket-test-echo サンプルからアクセスする server rails 上に em-websocket を実装したcontrollerを用意する
※ rails に関しては、省略 Ubuntu 14.04 libwebsockets クライアントを試す libwebsockets build sudo aptitude install cmake cd ~/works git clone git://git.libwebsockets.org/libwebsockets cd libwebsockets/ mkdir build cd build cmake .. make -j8 # sudo make install サンプルとして作成したサーバに libwebsocket-test-echo サンプルからアクセスする server rails 上に em-websocket を実装したcontrollerを用意する</description></item><item><title>Ubuntu 14.04 rails scoffoldでEntity作成、からDB migrateまで</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-rails-scoffolddeentityzuo-cheng-karadb-migratemade/</link><pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-rails-scoffolddeentityzuo-cheng-karadb-migratemade/</guid><description>以下のような形式で generate できる bundle exec rails generate scaffold [entity_name] [column_name]:[data_type][column_name]:[data_type] # 間違えたら！ bundle exec rails destroy scaffold &amp;quot;name&amp;quot; data type integer, string, timestamp などなどが使える Generateした各ファイルをそれぞれ条件を追加するように、下記のように修正 db/migrate/YYYYMMDDhhmmss_create_[entity_name].rb 以下のように、NotNullや桁指定、デフォルト指定ができる class CreateEvents &amp;lt; ActiveRecord::Migration def change create_table :[entity_name] do |t| t.string :column_name, :null =&amp;gt; false, :limit =&amp;gt; 1, :default =&amp;gt; 0 t.timestamps end end end 作成した rb ファイルで、DB再作成 # 通常DB作成 # bundle exec rake db:migrate # DB再作成（db/schema.</description></item><item><title>Ubuntu 14.04 ruby2.1.2 で ActiveRecord4.1.6 を使用し、postgresql4.1.6 へアクセス</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-ruby2-1-2-de-activerecord4-1-6-woshi-yong-si-postgresql4-1-6-heakusesu/</link><pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-ruby2-1-2-de-activerecord4-1-6-woshi-yong-si-postgresql4-1-6-heakusesu/</guid><description>まずはdatabase 確認 sudo su postgres -c psql install activerecord,pg mkdir -p ~/works/99_sample/02_activerecord cd ~/works/99_sample/02_activerecord gem install activerecord gem install pg gem list DBユーザtest_nameを作成しておく sudo su postgres -c psql create role test_name superuser login; \password test_name Enter new password: test_name Enter it again: test_name create database test_name; config/database.yml mkdir -p config &amp;amp;&amp;amp; vim config/database.yml
db: production: adapter: postgresql host: localhost username: test_name password: test_name database: test_name development: adapter: postgresql host: localhost username: test_name password: test_name database: test_name db/migrate配下に、３ファイルを配置(rails環境からコピー) mkdir -p db/migrate</description></item><item><title>Ubuntu 14.04 で websocket, zeroMQ</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-de-websocket-zeromq/</link><pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-de-websocket-zeromq/</guid><description>rails 、postgresql、zeroMQ、websocketを使って通信するサンプル環境を作成中
create rails project cd 任意のディレクトリ rails new test_rails_postgres -d postgresql cd test_rails_postgres bundle install --path vendor/bundle bundle exec rake db:create db:migrate テスト起動確認 cd test_rails_postgres rails server http://[サーバアドレス]:3000へアクセス git 管理開始 cd test_rails_postgres git init vim .gitignore 以下を追加 doc/ *.swp *~ .project .DS_Store .idea .secret git add . git commit -m &amp;quot;initial commit.&amp;quot; テスト設定 bundle exec rails generate scaffold book title:string author:string outline:text bundle exec rake db:migrate bundle exec rails server db確認 -- database list \l -- user list select * from pg_user; -- table list \d routes の確認 http://localhost:3000/rails/info/routes rails へwebsocket実装 websocket-rails install cd test_rails_postgres vim Gemfile # 以下を追加 gem 'websocket-rails' bundle install rails g websocket_rails:install # コントローラ作成 vim app/controllers/websocket_chat_controller.</description></item><item><title>Ubuntu 14.04 ランチャーにアプリ(meld)を登録する</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-rantiyaniapurimeldwodeng-lu-suru/</link><pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-rantiyaniapurimeldwodeng-lu-suru/</guid><description>適当な場所に以下のファイルを作成する vim ~/bin/meld.desktop 以下内容にする [Desktop Entry] Type=Application Name=Meld GenericName=meld Icon=~/bin/meld-1.8.6/data/icons/hicolor/48x48/apps/meld.png Exec=~/bin/meld-1.8.6/bin/meld Terminal=false</description></item><item><title>UX21A prime へ Win8.1 と Ubuntu14.04のデュアルブート</title><link>https://tro3373.github.io/post/ubuntu/ux21a-prime-he-win8-1-to-ubuntu14-04nodeyuarubuto/</link><pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ux21a-prime-he-win8-1-to-ubuntu14-04nodeyuarubuto/</guid><description>参考にしたのはここ
ありがとうございます。これでようやく素敵うぼんとぅライフin電車！
Windowsリカバリイメージをバックアップ windows 8 標準機能にてバックアップ
usb ubuntu 14.04を作成 ubuntu 14.04(別PC)よりブータブルUSBの作成からダウンロードしたISOファイルを焼く
ux21aをUSBから起動 起動時にesc連打し、USBを選択
パーティション編集 Gpartedパーティション編集ツールにて、Win8システムパーティションより後ろを全て削除
このへんの記憶が曖昧過ぎて申し訳ないですが、なんせDドライブの一つ左にあるリカバリ用のパーティションを含め削除しても、問題なかった！
ubuntu インストール EFI 50Mb作成 /システムパーティション作成(ext4 約141G作成(swap4096Mb引いて作成)) 残りをswapに /システム(/dev/sda6かな？)にブートローダ設定 起動時にESC連打で切り替え可能！右クリックも効いてる！ というより、自然に動き過ぎて怖い。すべて問題なく動作しています。
起動時に自動で、Ubuntuのブートローダが自動で windows8 認識しており、
起動時に esc 連打しなくても勝手に選択画面に移動するし。。。
ステキ！あーすーす、あ、ちが、えいすぅーすぅたまぁ！
wifi bluetooth mouse pad 音量設定 etc&amp;hellip;</description></item><item><title>Ubuntu 14.04 にrbenvを使用し、ruby2.1.2をインストールする</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-nirbenvwoshi-yong-si-ruby2-1-2woinsutorusuru/</link><pubDate>Thu, 18 Sep 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-nirbenvwoshi-yong-si-ruby2-1-2woinsutorusuru/</guid><description>install packages sudo add-apt-repository ppa:chris-lea/node.js sudo apt-get update sudo apt-get install build-essential git curl zlib1g-dev libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt-dev sqlite3 libsqlite3-dev nodejs tk ruby-dev rbenv install git clone https://github.com/sstephenson/rbenv.git ~/.rbenv git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build echo 'export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;' &amp;gt;&amp;gt; ~/.bashrc echo 'eval &amp;quot;$(rbenv init -)&amp;quot;' &amp;gt;&amp;gt; ~/.bashrc . .bashrc gem install rbenv-rehash gem install bundler ruby install rbenv install -list rbenv install 2.1.2 rbenv versions rbenv global 2.1.2 rails gem install rails rbenv rehash rails -v</description></item><item><title>Ubuntu 14.04 日本語ディレクトリ名を英語にする</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-ri-ben-yu-deirekutoriming-woying-yu-nisuru/</link><pubDate>Thu, 11 Sep 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-ri-ben-yu-deirekutoriming-woying-yu-nisuru/</guid><description>Ubuntu 14.04 日本語ディレクトリ名を英語にする terminal で以下を実行 env LANGUAGE=C LC_MESSAGES=C xdg-user-dirs-gtk-update 以下を実行 ログアウト ログイン 古い名前のままにするかどうかを聞かれる これ以上表示させないにチェックを付けて終了</description></item><item><title>Ubuntu 14.04 Python でWebsocket実装</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-python-dewebsocketshi-zhuang/</link><pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-14-04-python-dewebsocketshi-zhuang/</guid><description>Ubuntu14.04 Python 2.7.6 でWebsocket実装 モジュールのインストール sudo apt-get install libevent-dev python-dev python-setuptools sudo easy_install gevent sudo easy_install gevent-websocket サーバスクリプト作成 vi chat.py
#! /usr/bin/python # -*- coding: utf-8 -*- import os import random from geventwebsocket.handler import WebSocketHandler from gevent import pywsgi, sleep ws_list = set() def chat_handle(environ, start_response): global cnt ws = environ['wsgi.websocket'] ws_list.add(ws)a print 'enter!', len(ws_list) while 1: msg = ws.receive() if msg is None: break remove = set() for s in ws_list: try: s.</description></item><item><title>Ubuntu14.04 Node.js をインストール</title><link>https://tro3373.github.io/post/ubuntu/ubuntu14-04-node-js-woinsutoru/</link><pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu14-04-node-js-woinsutoru/</guid><description>Ubuntu14.04 Node.jsをインストール install packages. sudo apt-get install git curl build-essential libssl-dev install nvm. git clone https://github.com/creationix/nvm.git ~/.nvm . ~/.nvm/nvm.sh nvm install 0.10 ######################################################################## 100.0% Now using node v0.10.31 nvm version vi ~/.bashrc # 以下追加 . ~/.nvm/nvm.sh nvm use v0.10.31 # defaultバージョンを指定 nvm alias default v0.10.31 # Node.jsはバージョン番号が偶数が安定バージョン、奇数は開発バージョン hellow world 作成 cd 任意のディレクトリ vim hellowworld.js ------------------------------------- var sys = require('sys'); var http = require('http'); var server = http.createServer( function (request, response) { response.</description></item><item><title>Ubuntu 12.04 でメディア自動マウントを無効化する</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-12-04-demedeiazi-dong-mauntowowu-xiao-hua-suru/</link><pubDate>Sat, 08 Jun 2013 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-12-04-demedeiazi-dong-mauntowowu-xiao-hua-suru/</guid><description>Ubuntu 12.04 でメディア自動マウントを無効化する Ubuntu 12.04のGNOMEのメディア自動マウントを無効化する
自動マウントは便利といえば便利なのだが、ファイルシステム復旧のようなセンシティブな作業をしているときにやられると困る場合がある。
その際に、無効化するには、以下のコマンドを実行する。
$ gsettings get org.gnome.desktop.media-handling automount true ←有効の状態 $ gsettings set org.gnome.desktop.media-handling automount false $ gsettings get org.gnome.desktop.media-handling automount false ←無効になった</description></item><item><title>Microsoft wiress mouse 3500 ubuntu patch settings</title><link>https://tro3373.github.io/post/ubuntu/microsoft-wiress-mouse-3500-ubuntu-patch-settings/</link><pubDate>Thu, 23 May 2013 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/microsoft-wiress-mouse-3500-ubuntu-patch-settings/</guid><description>Microsoft wiress mouse 3500 ubuntu patch settings 参考
Ubuntu で Microsoft Wiress Mouse 3500 を使用した際、マウスホイールの動きが おかしいので、パッチを当てる、という話。</description></item><item><title>Ubuntuで壁紙を自動で変更する</title><link>https://tro3373.github.io/post/ubuntu/ubuntudebi-zhi-wozi-dong-debian-geng-suru/</link><pubDate>Thu, 20 Sep 2012 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntudebi-zhi-wozi-dong-debian-geng-suru/</guid><description>Ubuntuで壁紙を自動で変更する 参考
tool/installを変更 #timeout=$1 #enabled=$2 #depth=$3 #shift;shift;shift #base=$@ base=$1 timeout=$2 enabled=$3 depth=$4 kickerを新規作成 vim ~/bin/kick-wp-show.sh
#! /bin/bash cd ~/bin/gnome-3-wp-gnome-3-wp nohup ./wp-show &amp;amp; wait 1 exit</description></item><item><title>ubuntu11.10でGoogle日本語入力</title><link>https://tro3373.github.io/post/ubuntu/ubuntu11-11degoogleri-ben-yu-ru-li/</link><pubDate>Fri, 13 Jul 2012 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu11-11degoogleri-ben-yu-ru-li/</guid><description>ubuntu11.10でGoogle日本語入力 参考
sudo apt-get install ibus-mozc mozc-server mozc-utils-gui</description></item><item><title>Ubuntu11.10にてNAS(玄箱HG)を自動マウントする</title><link>https://tro3373.github.io/post/kurobox-linkstation/ubuntu11-10nitenasxuan-xiang-hgwozi-dong-mauntosuru/</link><pubDate>Wed, 30 May 2012 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/kurobox-linkstation/ubuntu11-10nitenasxuan-xiang-hgwozi-dong-mauntosuru/</guid><description>Ubuntu11.10にてNAS(玄箱HG)を自動マウントする 参考
fastab 編集 以下を追加※パスワードを/root配下に置くなどして、隠蔽化する
//サーバ名/マウントディレクトリ /ローカルマウントディレクトリ cifs iocharset=utf8,uid=ローカル.uid,gid=ローカル.gid,credentials=/root/secret.txt 0 0 /root へNAS接続パスワードを配置
sudo vi /root/secret.txt ファイル内容は以下
username=NAS接続ユーザ名 password=NAS接続ユーザパスワード マウント・接続テスト
sudo mount -a</description></item><item><title>Ubuntu11.10 chromeでyoutubeを見ると、どれを見ても青いバグを解消する</title><link>https://tro3373.github.io/post/ubuntu/ubuntu11-10-chromedeyoutubewojian-ruto-dorewojian-temoqing-ibaguwojie-xiao-suru/</link><pubDate>Sun, 20 May 2012 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu11-10-chromedeyoutubewojian-ruto-dorewojian-temoqing-ibaguwojie-xiao-suru/</guid><description>Ubuntu11.10 chromeでyoutubeを見ると、どれを見ても青いバグを解消する という現状が起きた時の対処があった
http://ameblo.jp/newcomer-t/entry-11244836873.html
解決方法？
sudo mkdir /etc/adobe echo -e &amp;quot;EnableLinuxHWVideoDecode=1\nOverrideGPUValidation=true&amp;quot; | sudo tee /etc/adobe/mms.cfg &amp;gt; /dev/null</description></item><item><title>Ubuntu geditショートカットキーを変更する</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-geditsiyotokatutokiwobian-geng-suru/</link><pubDate>Sat, 31 Mar 2012 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-geditsiyotokatutokiwobian-geng-suru/</guid><description>Ubuntu geditショートカットキーを変更する 設定ファイル 設定ファイルの先頭のコメント外し設定する
vim ~/.config/gedit/accels</description></item><item><title>Ubuntu で SVN差分のある変更ファイルをexportする</title><link>https://tro3373.github.io/post/ubuntu/ubuntu-de-svnchai-fen-noarubian-geng-huairuwoexportsuru/</link><pubDate>Wed, 23 Nov 2011 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntu-de-svnchai-fen-noarubian-geng-huairuwoexportsuru/</guid><description>Ubuntu で SVN差分のある変更ファイルをexportする やりたいことは以下 SVNコマンドで変更したファイル一覧をExportしたい 変更したファイルについては、変更前のソースもExportしたい 上記２つよりDiffツールを使ってファイル差分を見たい SVNの差分ファイル一覧は svn diff | awk '/^Index/ {print $NF}' で取得できる 以下、作成したプログラム
#!/bin/bash ################################################################################ # SETTINGS. ROOTDIR=/env/android- OUTDIR=~/デスクトップ FIXDIR=fix ORGDIR=original ################################################################################ shellFileName=`basename $0` fncEchoLog() { dateStr=`date '+%Y%m%d:%H:%M:%S'` outMsg=&amp;quot;[$shellFileName] $dateStr $*&amp;quot; echo &amp;quot;$outMsg&amp;quot; } copyParents() { targetFile=$1 fncEchoLog &amp;quot;=&amp;gt; $targetFile&amp;quot; cp -p --parents $targetFile $OUTDIR } svnRevert() { targetFile=$1 fncEchoLog &amp;quot;=&amp;gt; $targetFile&amp;quot; svn revert $targetFile } compareable() { targetFile=$1 fncEchoLog &amp;quot;=&amp;gt; $targetFile&amp;quot; cp -p --parents $targetFile $OUTDIR/$FIXDIR svn revert $targetFile cp -p --parents $targetFile $OUTDIR/$ORGDIR cp -pf $OUTDIR/$FIXDIR/$targetFile $ROOTDIR/$targetFile } copyRevert() { targetFile=$1 fncEchoLog &amp;quot;=&amp;gt; $targetFile&amp;quot; cp -p --parents $targetFile $OUTDIR svn revert $targetFile } ################################################################################ fncEchoLog &amp;quot;--------------------------------------------------------------------&amp;quot; fncEchoLog &amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; MISSIOIN START&amp;quot; fncEchoLog &amp;quot;--------------------------------------------------------------------&amp;quot; fncEchoLog &amp;quot;TARGET DIR [$ROOTDIR]&amp;quot; fncEchoLog &amp;quot;OUTPUT DIR [$OUTDIR]&amp;quot; cd $ROOTDIR fncEchoLog &amp;quot;now checking fixed files.</description></item><item><title>Nexus S ビルド〜ロム焼き まで</title><link>https://tro3373.github.io/post/android/nexus-s-birudo-romushao-ki-made/</link><pubDate>Sat, 30 Jul 2011 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/android/nexus-s-birudo-romushao-ki-made/</guid><description>Nexus S ビルド〜ロム焼き まで Nexus S 目指せ文鎮化！ぐらいの勢いで、ソースビルドからロム焼き
前提条件 環境PC Ubuntu 10.10 端末 Samsung製 Nexus S gingerbread 2.3.4 GRJ22 ベースバンドバージョン I9023XXKD1 カーネルバージョン 2.6.35.7-ge382d80 android-build@apa28 #1 ソース android 2.3.4ソースをrepoより取得している。 ライブラリ等については、通常ビルドできる状態とする。 Ubuntu 10.10 に Nexus S を認識させる。 lsusb で Google inc. を探す
sudo gedit /etc/udev/rules.d/51-android.rulesでデバイス情報を登録してやる
# 以下を追加 SUBSYSTEM==&amp;quot;usb&amp;quot;, SYSFS{idVendor}==&amp;quot;18d1&amp;quot;, MODE=&amp;quot;0666&amp;quot; リカバリイメージのダウンロード Clockwork Recovery image置き場 ビルド用のソースを取得 ソース取得したいディレクトリへ移動</description></item><item><title>androidフレームワーク開発Tips</title><link>https://tro3373.github.io/post/android/androidhuremuwakukai-fa-tips/</link><pubDate>Fri, 01 Jul 2011 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/android/androidhuremuwakukai-fa-tips/</guid><description>Android Life Cycle Activity Fragment ビルド # For Nexus S cd /path/to/the/sourcedirectory/ source build/envsetup.sh lunch 4 time make -j9 update-api time make -j9 # For vega source build/envsetup.sh time brunch vega -j9 # For Xoom export USE_CCACHE=1 TMP_CCACHE_DIR=/env/build.cache/wingray.tmp export CCACHE_DIR=$TMP_CCACHE_DIR/.ccache prebuilt/linux-x86/ccache/ccache -M 20G source build/envsetup.sh lunch 5 time make -j9 Flash image # crespo(Nexus S) ENVPATH=/env/nexus/kmpf-android-2.3.4 DEVICE_NAME=crespo fastboot flash boot $ENVPATH/out/target/product/${DEVICE_NAME}/boot.img fastboot flash recovery $ENVPATH/out/target/product/${DEVICE_NAME}/recovery.img fastboot flash userdata $ENVPATH/out/target/product/${DEVICE_NAME}/userdata.img fastboot flash system $ENVPATH/out/target/product/${DEVICE_NAME}/system.</description></item><item><title>Ubuntuのgrubを用いてWindowsとデュアルブートする</title><link>https://tro3373.github.io/post/ubuntu/ubuntunogrubwoyong-itewindowstodeyuarubutosuru/</link><pubDate>Wed, 08 Jun 2011 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntunogrubwoyong-itewindowstodeyuarubutosuru/</guid><description>Ubuntuのgrubを用いてWindowsとデュアルブートする grubをもちいて、Ubuntu側の設定でWindowsとデュアルブート 参考はこちら
「GRUB2」 「Grub2 でのUUID 変更方法を教えてください。」 構造(流れ) /etc/default/grubを編集 sudo update-grub /boot/grub/grub.cfgへ反映される 手動で追加 1.手動で追加する場合は、/etc/grub.d/40_customに、grub.cfgに書かれているようにOS設定を登録
2.sudo update-grub で完了のはず
編集する
$ sudo gedit /etc/grub.d/40_custom 以下を追加 menuentry &amp;quot;Windows XP Service Pack 3 (on /dev/sdb1)&amp;quot; { insmod part_msdos insmod ntfs set root='(hd1,1)' chainloader +1 } ※(hd1,1)・・・HDDの2番目、2番目のパーティションの意味(どちらも0オリジン)。
反映
$ sudo update-grub Generating grub.cfg ... Found linux image: /boot/vmlinuz-2.6.35-28-generic Found initrd image: /boot/initrd.img-2.6.35-28-generic Found linux image: /boot/vmlinuz-2.6.35-22-generic Found initrd image: /boot/initrd.img-2.6.35-22-generic Found memtest86+ image: /boot/memtest86+.</description></item><item><title>UbuntuとWindowsXPデュアルブート環境にて、Windowsの時刻が大幅に（９時間程ずれる）場合の設定</title><link>https://tro3373.github.io/post/ubuntu/ubuntutowindowsxpdeyuarubutohuan-jing-nite-windowsnoshi-ke-gada-fu-ni9shi-jian-cheng-zureruchang-he-noshe-ding/</link><pubDate>Sat, 04 Jun 2011 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/ubuntutowindowsxpdeyuarubutohuan-jing-nite-windowsnoshi-ke-gada-fu-ni9shi-jian-cheng-zureruchang-he-noshe-ding/</guid><description>UbuntuとWindowsをデュアルブート環境にしてさぁ、とおもったらWindowsの時刻が大幅にずれている。。 そんなことになったら、これ。
参考
/etc/default/rcSを書き換える
$ sudo gedit /etc/default/rcS 以下のように書き換える UTC=yes =&amp;gt; no 以上！</description></item><item><title>WindowsのブートローダーでUbuntuとデュアルブートする</title><link>https://tro3373.github.io/post/ubuntu/windowsnobutorodadeubuntutodeyuarubutosuru/</link><pubDate>Tue, 31 May 2011 00:00:00 +0000</pubDate><guid>https://tro3373.github.io/post/ubuntu/windowsnobutorodadeubuntutodeyuarubutosuru/</guid><description>WindowsのブートローダーでUbuntuとデュアルブートする grub4dosをもちいて、WindowsブートローダでUbuntuとデュアルブート 参考はこちら
「Ubuntu Windows デュアルブート」 「Windows XPとUbuntu 10.10をMBMを使ってデュアルブートしました！」 「WindowsのブートローダーでLinuxとデュアルブートする方法 - Ubuntu 10.04 LTS, Grub 2の場合」 「WindowsのブートローダーでLinuxとデュアルブートする方法 - Ubuntu 11.04, Grub2の場合」 ・grub4dosダウンロードこちらからダウンロード
・grub4dosを解凍しc:¥直下に配置
以下２ファイル grldr.mbr grldr ・c:¥menu.list作成
内容は以下 # ３番目のデバイスの１番目のパーティション指定UUIDなども使用できるそう。 title Ubuntu /dev/sdc1 root (hd2,0) kernel /boot/grub/core.img ※(hd2,0)・・・HDDの3番目、1番目のパーティションの意味(どちらも0オリジン)。</description></item></channel></rss>