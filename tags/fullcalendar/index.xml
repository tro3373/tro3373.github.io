<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>FullCalendar on tac lifelog</title>
    <link>https://tro3373.github.io/tags/fullcalendar/</link>
    <description>Recent content in FullCalendar on tac lifelog</description>
    <image>
      <title>tac lifelog</title>
      <url>https://tro3373.github.io/favicon.png</url>
      <link>https://tro3373.github.io/favicon.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 03 Sep 2024 20:25:45 +0900</lastBuildDate><atom:link href="https://tro3373.github.io/tags/fullcalendar/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FullCalendar &#43; shadcn Dialog で再レンダリングされるのを防ぐ</title>
      <link>https://tro3373.github.io/posts/2024/2024-09-03-prevent-re-rendering-full-calendar-with-shadcn-dialog-in-next/</link>
      <pubDate>Tue, 03 Sep 2024 20:25:45 +0900</pubDate>
      
      <guid>https://tro3373.github.io/posts/2024/2024-09-03-prevent-re-rendering-full-calendar-with-shadcn-dialog-in-next/</guid>
      <description>問題 FullCalendar と 同じページに shadcn Dialog を組み込み、 shadcn (Radix UI) Dialog の open ステートを useState で管理していると、 ダイアログの open/close 時に FullCalendar が再レンダリングされてしまう。
GoogleCalendarのイベントや、独自イベントがある場合、再レンダリングされると、 イベントが消えてしまう。 解決方法 ref, forwardRefs, useImperativeHandle を使って、再レンダリングを防ぐ。 以下詳細 まずは Dialog側 import { Ref, useMemo, useCallback, useState, forwardRef, useImperativeHandle, } from &amp;#39;react&amp;#39;; import { Button } from &amp;#39;@/components/ui/button&amp;#39;; import { Dialog, DialogContent, } from &amp;#39;@/components/ui/dialog&amp;#39;; type SampleProps = { }; export interface SampleDialogRefInterface { open: () =&amp;gt; void; close: () =&amp;gt; void; } const SampleDialogButtonInner = (_: SampleProps, ref: Ref&amp;lt;SampleDialogRefInterface&amp;gt;) =&amp;gt; { const [isOpen, setIsOpen] = useState(false); useImperativeHandle(ref, () =&amp;gt; ({ open: () =&amp;gt; setIsOpen(true), close: () =&amp;gt; setIsOpen(false), })); return ( &amp;lt;Dialog open={isOpen} onOpenChange={setIsOpen}&amp;gt; {/* 外部からOpenしたいので、DialogTriggerは使わない */} {/* &amp;lt;DialogTrigger asChild&amp;gt; &amp;lt;Button&amp;gt;ボタン&amp;lt;/Button&amp;gt; &amp;lt;/DialogTrigger&amp;gt; */} &amp;lt;DialogContent className=&amp;#39;h-[90%] overflow-hidden&amp;#39;&amp;gt; {/* 省略 */} &amp;lt;/DialogContent&amp;gt; &amp;lt;/Dialog&amp;gt; ); // } }; const SampleDialogButton = forwardRef(SampleDialogButtonInner); export default SampleDialogButton; SampleProps 親側から渡す props SampleDialogRefInterface ダイアログとして公開したいメソッドを定義する _: SampleProps props は使わないので、_ で受け取る。propsがないとエラー ref: Ref&amp;lt;SampleDialogRefInterface&amp;gt; ref を受け取る const [isOpen, setIsOpen] = useState(false); ダイアログの open/close ステートを useState で管理 &amp;lt;Dialog open={isOpen} onOpenChange={setIsOpen}&amp;gt; isOpen, setIsOpen を Dialog の open, onOpenChange で紐付け useImperativeHandle ref として公開して、外部から呼ばれた場合の動作を定義 Dialogの開閉を外部から制御できるようにする const SampleDialogButton = forwardRef(SampleDialogButtonInner) forwardRef で ref を受け取るコンポーネントを作成 FullCalendar 側(親側) import { EventClickArg } from &amp;#39;@fullcalendar/core&amp;#39;; import FullCalendar from &amp;#39;@fullcalendar/react&amp;#39;; import { useRef, useCallback } from &amp;#39;react&amp;#39;; import SampleDialogButton, { SampleDialogRefInterface, } from &amp;#39;@/app/_components/SampleDialogButton&amp;#39;; export default function Calendar() { const sampleDialogRef = useRef&amp;lt;SampleDialogRefInterface&amp;gt;(null); const onDateClick = useCallback( (arg: DateClickArg) =&amp;gt; { const target = arg.</description>
    </item>
    
  </channel>
</rss>
