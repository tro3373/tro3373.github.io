<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>docker on tac lifelog</title>
    <link>https://tro3373.github.io/tags/docker/</link>
    <description>Recent content in docker on tac lifelog</description>
    <image>
      <title>tac lifelog</title>
      <url>https://tro3373.github.io/favicon.png</url>
      <link>https://tro3373.github.io/favicon.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 24 Jun 2024 19:34:12 +0900</lastBuildDate><atom:link href="https://tro3373.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>atmoz/sftp コンテナにログインするとハングする問題を解決する</title>
      <link>https://tro3373.github.io/posts/2024/2024-06-24-sftp-hung-12-minutes/</link>
      <pubDate>Mon, 24 Jun 2024 19:34:12 +0900</pubDate>
      
      <guid>https://tro3373.github.io/posts/2024/2024-06-24-sftp-hung-12-minutes/</guid>
      <description>問題 atmoz/sftp イメージを使用して、SFTPサーバを立ち上げた際に、
ログインすると長い間ハングして、放置していたらログインできていた、という事象が発生した 開発者間で、同じ問題が発生していた 考察 色々ググった結果、下記記事にたどり着いた
linux - Excessive SFTP CPU usage with chroot enabled when using the official Docker repository - Unix &amp;amp; Linux Stack Exchange Debugging a 12 minute hang after SFTP login どうも コンテナで使用する system の リソース制限の問題のようだったので、
ulimits を設定することで解決した
解決方法 ulimits を設定する
ulimits: nproc: 65535 nofile: soft: 26677 hard: 46677 docker compose の sftp コンテナの全体はこんな感じ
sftp: platform: linux/x86_64 container_name: $app-sftp image: atmoz/sftp init: true ulimits: nproc: 65535 nofile: soft: 26677 hard: 46677 volumes: - .</description>
    </item>
    
    <item>
      <title>Docker mysql 5.7 イメージで初期化処理に失敗して、ログインできない</title>
      <link>https://tro3373.github.io/posts/2023/2023-08-04-docker-mysql-5.7-initialize-error/</link>
      <pubDate>Fri, 04 Aug 2023 18:15:10 +0900</pubDate>
      
      <guid>https://tro3373.github.io/posts/2023/2023-08-04-docker-mysql-5.7-initialize-error/</guid>
      <description>発生したエラー MySQL 5.7 のイメージ を使用して単純に起動しても下記エラーが発生して、初期化処理に失敗していた。
厳密には初期化時に上記エラーが出て、初期化SQLまでたどり着かなかった。
初期化処理に失敗すると、mysql userの設定や admin パスワードの設定がうまくできないようで、どうしようもない状態になるようで、、これをなんとかしたかった&amp;hellip;
/usr/local/bin/docker-entrypoint.sh: line 137: 126 Killed &amp;#34;$@&amp;#34; --skip-networking --default-time-zone=SYSTEM --socket=&amp;#34;${SOCKET}&amp;#34; ログをみると怪しい部分は上記のみで、どうもプロセスがいきなり Kill されているように見える
原因はリソースの使いすぎ 以下のようなコメントにたどり着いた
1708115 – Running mysql container in moby-engine results in 100% memory usage Really high memory usage · Issue #579 · docker-library/mysql Thank you so much @evolbug! The bug you found put me on the right tracks. The issue is caused by the ulimit nofile. By default, on arch, the value is too low I guess.</description>
    </item>
    
    <item>
      <title>Docker Machine(Boot2Docker(Tiny Linux)) 上で docker/gitlab を動かしてみる</title>
      <link>https://tro3373.github.io/posts/2015/2015-10-10-docker-machine-docker-gitlab/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tro3373.github.io/posts/2015/2015-10-10-docker-machine-docker-gitlab/</guid>
      <description>sameersbn/gitlab:8.0.4 オンプレミスな GitHub Clone GitLab
かなり気持ち悪いロゴ&amp;hellip;(なぜこうなった) バージョンUPでこうなったらしい&amp;hellip; それはいいとして、 Docker image を利用して、公式に公開されている、docker/gitlab
を docker-machine で作成した docker-host（virtual-box） 上で 動かしてみた。
インストール ssh で docker-machine ホストOSへ接続した状態でおこなう
docker-machine ssh dev docker pull sameersbn/gitlab:8.0.4 cd ~/works/ git clone https://github.com/sameersbn/docker-gitlab.git cd docker-gitlab # Dockerfile からビルドする場合 # docker build --tag=$USER/gitlab . docker-compose インストール docker コンテナを複数使用するアプリケーションの構成（起動順序や必要リソースなど）をまとめて管理できるのが、 docker-compose
clone されたディレクトリに、 docker-compose.yml が存在するので、 docker-compose で起動できる。
# docker-compose ダウンロード cd ~/Downloads wget https://github.com/docker/compose/releases/download/1.4.2/docker-compose-Linux-x86_64 sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose sudo chmod 755 /usr/local/bin/docker-compose # version 確認 docker-compose --version # 以下が表示される # docker-compose version: 1.</description>
    </item>
    
    <item>
      <title>Ubuntu 14.04 上に Docker Machine を インストールする</title>
      <link>https://tro3373.github.io/posts/2015/2015-10-10-ubuntu-14-04-shang-ni-docker-machine-wo-insutorusuru/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tro3373.github.io/posts/2015/2015-10-10-ubuntu-14-04-shang-ni-docker-machine-wo-insutorusuru/</guid>
      <description>Docker Machine を試す！
docker-machine docker-machine は Docker ホストを管理するツールで、ホストとなる Docker コンテナ起動サーバが、VM や AWS、 Digital Ocean などの ホストへ接続し実行する事で、あたかも local で docker コンテナが動いているかのように振る舞うツール。
Docker コンテナ管理ツールとしても仕様できるみたい。
docker インストール まずは、 dokcer のインストール
# Docker install wget -qO- https://get.docker.com/ | sh # version を確認しておく。 docker --version # 以下が表示される # Docker version 1.8.2, build 0a8c2e3 # ユーザーを docker グループに追加 sudo usermod -aG docker $USER docker-machine インストール 続いて、 docker-machine をインストールする。
cd ~/Download wget https://github.com/docker/machine/releases/download/v0.4.1/docker-machine_linux-amd64 sudo mkdir -p /opt/bin sudo mv docker-machine_linux-amd64 /opt/bin/docker-machine sudo chmod +x /opt/bin/docker-machine # docker-machine version 確認 # /opt/bin にパスが通っている事！ docker-machine -v # 以下のようにバージョンが表示される # docker-machine version 0.</description>
    </item>
    
    <item>
      <title>Nuc(D54250WYKH)に CoreOS をインストールし、Docker を触る</title>
      <link>https://tro3373.github.io/posts/2015/2015-01-17-nucd54250wykhni-coreos-woinsutorusi-docker-wohong-ru/</link>
      <pubDate>Sat, 17 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tro3373.github.io/posts/2015/2015-01-17-nucd54250wykhni-coreos-woinsutorusi-docker-wohong-ru/</guid>
      <description>Nuc(D54250WYKH)に CoreOS をインストールし、Docker を触る CoreOS インストール ISO イメージダウンロード CoreOS ISO イメージを ここ からダウンロード
または、以下コマンドで取得
$ curl -o core-os.iso http://alpha.release.core-os.net/amd64-usr/current/coreos_production_iso_image.iso?__hstc=112362075.27b09ada9633d5c4e4307490970e61ed.1421419603585.1421419603585.1421419603585.1&amp;amp;__hssc=112362075.1.1421419603585&amp;amp;__hsfp=4136096990 USB 起動ディスクの作成 Mac OS からUSB起動ディスク作成を行う場合は、以下コマンドで、ISO イメージを変換
$ hdiutil convert -format UDRW -o out.img coreos_production_iso_image.iso Mac 上の認識デバイスIDを確認
$ diskutil list USB アンマウント
$ diskutil unmountDisk /dev/disk2 イメージ書き込み
$ sudo dd if=out.img.dmg of=/dev/disk2 bs=1m USB 取り出し
$ diskutil eject /dev/disk2 CoreOS を Nuc で起動 USB メモリから起動 insert usb disk. power on F10 連打! 起動した CoreOS の設定 パスワード変更</description>
    </item>
    
  </channel>
</rss>
